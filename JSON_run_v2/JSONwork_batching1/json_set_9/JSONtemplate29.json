{"AWSTemplateFormatVersion": "2010-09-09", "Description": "CloudFormation template using a custom macro for date manipulation including getting the current date and doing date math.", "Resources": {"DateMacroFunction": {"Type": "AWS::Lambda::Function", "Properties": {"Handler": "index.handler", "Role": {"Fn::GetAtt": ["DateMacroExecutionRole", "Arn"]}, "Code": {"ZipFile": {"Fn::Join": ["\n", ["import json", "import datetime", "", "def handler(event, context):", "    params = event['params']", "    if params['action'] == 'current_date':", "        return {'statusCode': 200, 'body': json.dumps({'date': datetime.datetime.utcnow().strftime('%Y-%m-%d')})}", "    elif params['action'] == 'date_add':", "        date_str = params['date']", "        days = int(params['days'])", "        date_obj = datetime.datetime.strptime(date_str, '%Y-%m-%d')", "        new_date = date_obj + datetime.timedelta(days=days)", "        return {'statusCode': 200, 'body': json.dumps({'date': new_date.strftime('%Y-%m-%d')})}", "    else:", "        return {'statusCode': 400, 'body': json.dumps('Invalid action')}"]]}}, "Runtime": "python3.8", "Timeout": 30}}, "DateMacro": {"Type": "AWS::CloudFormation::Macro", "Properties": {"FunctionName": {"Ref": "DateMacroFunction"}, "Name": "DateMacro"}}, "DateMacroExecutionRole": {"Type": "AWS::IAM::Role", "Properties": {"AssumeRolePolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Principal": {"Service": "lambda.amazonaws.com"}, "Action": "sts:AssumeRole"}]}, "Policies": [{"PolicyName": "DateMacroExecutionPolicy", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"], "Resource": "*"}]}}]}}}, "Outputs": {"DateMacroArn": {"Description": "The ARN of the date macro function", "Value": {"Fn::GetAtt": ["DateMacroFunction", "Arn"]}}}}