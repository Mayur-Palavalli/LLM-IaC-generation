{"AWSTemplateFormatVersion": "2010-09-09", "Resources": {"DateMacro": {"Type": "AWS::CloudFormation::Macro", "Properties": {"Name": "DateMacro", "FunctionName": {"Fn::GetAtt": ["DateLambdaFunction", "Arn"]}, "Description": "Provides functions for date manipulation in your CloudFormation templates including getting the current date, and doing date math."}}, "DateLambdaFunction": {"Type": "AWS::Lambda::Function", "Properties": {"Handler": "date_macro.handler", "Role": {"Fn::GetAtt": ["LambdaExecutionRole", "Arn"]}, "Code": {"ZipFile": {"Fn::Join": ["\n", ["import json", "from datetime import datetime, timedelta", "", "def handler(event, context):", "    try:", "        request_type = event['requestType']", "        if request_type == 'GetCurrentDate':", "            return {'status': 'success', 'currentDate': datetime.utcnow().isoformat() + 'Z'}", "        elif request_type == 'AddDays':", "            days = int(event['days'])", "            result_date = datetime.utcnow() + timedelta(days=days)", "            return {'status': 'success', 'resultDate': result_date.isoformat() + 'Z'}", "        else:", "            return {'status': 'failure', 'message': 'Invalid request type'}", "    except Exception as e:", "        return {'status': 'failure', 'message': str(e)}"]]}}, "Runtime": "python3.8", "Timeout": 30, "MemorySize": 128}}, "LambdaExecutionRole": {"Type": "AWS::IAM::Role", "Properties": {"AssumeRolePolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Principal": {"Service": "lambda.amazonaws.com"}, "Action": "sts:AssumeRole"}]}, "Policies": [{"PolicyName": "LambdaExecutionPolicy", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["logs:*", "lambda:InvokeFunction"], "Resource": "*"}]}}]}}}}