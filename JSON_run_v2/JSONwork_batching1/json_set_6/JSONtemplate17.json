{"AWSTemplateFormatVersion": "2010-09-09", "Description": "AWS CloudFormation Sample Template ELBGuidedAutoScalingRollingUpdates: This template creates an auto scaling group behind a load balancer with a simple health check. The Auto Scaling launch configuration includes an update policy that will keep 2 instances running while doing an autoscaling rolling update. The update will roll forward only when the ELB health check detects an updated instance in-service.", "Parameters": {"subnetId": {"Type": "AWS::EC2::Subnet::Id", "Description": "The Subnet ID for the Auto Scaling Group"}, "VpcId": {"Type": "AWS::EC2::VPC::Id", "Description": "The VPC ID for the Target Group"}}, "Resources": {"myLoadBalancer": {"Type": "AWS::ElasticLoadBalancing::LoadBalancer", "Properties": {"AvailabilityZones": {"Fn::GetAZs": ""}, "Listeners": [{"LoadBalancerPort": "80", "InstancePort": "80", "Protocol": "HTTP"}], "HealthCheck": {"Target": "HTTP:80/", "HealthyThreshold": "3", "UnhealthyThreshold": "5", "Interval": "30", "Timeout": "5"}}}, "myLaunchConfiguration": {"Type": "AWS::AutoScaling::LaunchConfiguration", "Properties": {"ImageId": "ami-0ff8a91507f77f867", "InstanceType": "t2.micro", "SecurityGroups": [{"Ref": "InstanceSecurityGroup"}]}}, "myAutoScalingGroup": {"Type": "AWS::AutoScaling::AutoScalingGroup", "Properties": {"VPCZoneIdentifier": [{"Ref": "subnetId"}], "LaunchConfigurationName": {"Ref": "myLaunchConfiguration"}, "MinSize": "2", "MaxSize": "5", "DesiredCapacity": "2", "TargetGroupARNs": [{"Ref": "myTargetGroup"}]}, "UpdatePolicy": {"AutoScalingRollingUpdate": {"MinInstancesInService": "2", "MaxBatchSize": "1", "PauseTime": "PT0S", "WaitOnResourceSignals": true}}}, "myTargetGroup": {"Type": "AWS::ElasticLoadBalancingV2::TargetGroup", "Properties": {"Name": "myTargetGroup", "Port": 80, "Protocol": "HTTP", "VpcId": {"Ref": "VpcId"}, "HealthCheckPath": "/", "Matcher": {"HttpCode": "200"}, "TargetType": "instance"}}, "InstanceSecurityGroup": {"Type": "AWS::EC2::SecurityGroup", "Properties": {"GroupDescription": "Enable SSH access via port 22 and HTTP access on port 80", "SecurityGroupIngress": [{"IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": "0.0.0.0/0"}, {"IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "0.0.0.0/0"}]}}}, "Outputs": {"URL": {"Value": {"Fn::Join": ["", ["http://", {"Fn::GetAtt": ["myLoadBalancer", "DNSName"]}]]}}}}