{"AWSTemplateFormatVersion": "2010-09-09", "Resources": {"DateMacro": {"Type": "AWS::CloudFormation::Macro", "Properties": {"Name": "DateMacro", "FunctionName": {"Fn::GetAtt": ["DateMacroLambdaFunction", "Arn"]}, "LogGroupName": "/aws/lambda/DateMacro"}}, "DateMacroLambdaExecutionRole": {"Type": "AWS::IAM::Role", "Properties": {"AssumeRolePolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Principal": {"Service": ["lambda.amazonaws.com"]}, "Action": ["sts:AssumeRole"]}]}, "Policies": [{"PolicyName": "DateMacroLambdaExecutionPolicy", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"], "Resource": "*"}]}}]}}, "DateMacroLambdaFunction": {"Type": "AWS::Lambda::Function", "Properties": {"Handler": "index.lambda_handler", "Role": {"Fn::GetAtt": ["DateMacroLambdaExecutionRole", "Arn"]}, "Code": {"ZipFile": {"Fn::Join": ["\n", ["import json", "import datetime", "from datetime import timedelta", "def lambda_handler(event, context):", "    params = event['resourceProperties']", "    if params['Function'] == 'GetCurrentDate':", "        return {'statusCode': 200, 'response': str(datetime.datetime.utcnow())}", "    elif params['Function'] == 'AddDays':", "        start_date = datetime.datetime.strptime(params['StartDate'], '%Y-%m-%d')", "        delta = timedelta(days=int(params['Days']))", "        new_date = start_date + delta", "        return {'statusCode': 200, 'response': str(new_date)}", "    else:", "        return {'statusCode': 400, 'response': 'Invalid Function'}"]]}}, "Runtime": "python3.8", "Timeout": 60}}}, "Outputs": {"DateMacroArn": {"Description": "ARN of the Date CloudFormation Macro", "Value": {"Fn::GetAtt": ["DateMacroLambdaFunction", "Arn"]}}}}