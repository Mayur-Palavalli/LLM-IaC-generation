{"Resources": {"DateMacro": {"Type": "AWS::CloudFormation::Macro", "Properties": {"Name": "DateMacro", "FunctionName": {"Ref": "DateMacroFunction"}}}, "DateMacroFunction": {"Type": "AWS::Lambda::Function", "Properties": {"Handler": "index.handler", "Role": {"Fn::GetAtt": ["DateMacroExecutionRole", "Arn"]}, "Code": {"ZipFile": {"Fn::Join": ["\n", ["import json", "import datetime", "", "def calculate_new_date(start_date, delta):", "    return (start_date + delta).strftime('%Y-%m-%d')", "", "def handler(event, context):", "    if event['requestType'] == 'Create':", "        current_date = datetime.datetime.utcnow().strftime('%Y-%m-%d')", "        event['fragment']['current_date'] = current_date", "", "        if 'start_date' in event['params'] and 'days' in event['params']:", "            start_date = datetime.datetime.strptime(event['params']['start_date'], '%Y-%m-%d')", "            new_date = calculate_new_date(start_date, datetime.timedelta(days=event['params']['days']))", "            event['fragment']['new_date'] = new_date", "", "    return {'requestId': event['requestId'], 'status': 'success', 'fragment': event['fragment']}"]]}}, "Runtime": "python3.8", "Timeout": 30}}, "DateMacroExecutionRole": {"Type": "AWS::IAM::Role", "Properties": {"AssumeRolePolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Principal": {"Service": "lambda.amazonaws.com"}, "Action": "sts:AssumeRole"}]}, "Policies": [{"PolicyName": "DateMacroPolicy", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"], "Resource": "*"}]}}]}}}, "Outputs": {"DateMacroFunctionArn": {"Description": "The ARN of the Lambda function", "Value": {"Fn::GetAtt": ["DateMacroFunction", "Arn"]}}}}