{"AWSTemplateFormatVersion": "2010-09-09", "Resources": {"DateMacro": {"Type": "AWS::CloudFormation::Macro", "Properties": {"Name": "DateMacro", "FunctionName": {"Ref": "DateLambda"}, "Description": "A macro that provides date manipulation functions."}}, "DateLambda": {"Type": "AWS::Lambda::Function", "Properties": {"Handler": "index.handler", "Runtime": "python3.8", "Code": {"ZipFile": "import json\nimport datetime\ndef handler(event, context):\n    request_type = event['RequestType']\n    if request_type == 'get_current_date':\n        current_date = datetime.datetime.now().isoformat()\n        return { 'date': current_date }\n    elif request_type == 'add_days':\n        base_date = datetime.datetime.fromisoformat(event['BaseDate'])\n        delta_days = event['Days']\n        new_date = (base_date + datetime.timedelta(days=delta_days)).isoformat()\n        return { 'date': new_date }\n    elif request_type == 'subtract_days':\n        base_date = datetime.datetime.fromisoformat(event['BaseDate'])\n        delta_days = event['Days']\n        new_date = (base_date - datetime.timedelta(days=delta_days)).isoformat()\n        return { 'date': new_date }\n    else:\n        raise ValueError('Unsupported request type')"}, "Role": {"Fn::GetAtt": ["LambdaExecutionRole", "Arn"]}}}, "LambdaExecutionRole": {"Type": "AWS::IAM::Role", "Properties": {"AssumeRolePolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Principal": {"Service": "lambda.amazonaws.com"}, "Action": "sts:AssumeRole"}]}, "Policies": [{"PolicyName": "root", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": "logs:*", "Resource": "*"}]}}]}}}, "Outputs": {"MacroName": {"Value": {"Ref": "DateMacro"}}}}