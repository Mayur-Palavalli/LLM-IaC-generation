{"AWSTemplateFormatVersion": "2010-09-09", "Description": "AWS CloudFormation Sample Template ELBGuidedAutoScalingRollingUpdates: This template creates an auto scaling group behind a load balancer with a simple health check. The Auto Scaling launch configuration includes an update policy that will keep 2 instances running while doing an autoscaling rolling update. The update will roll forward only when the ELB health check detects an updated instance in-service.", "Resources": {"WebServerLaunchConfig": {"Type": "AWS::AutoScaling::LaunchConfiguration", "Properties": {"ImageId": "ami-0ff8a91507f77f867", "InstanceType": "t2.micro", "SecurityGroups": [{"Ref": "InstanceSecurityGroup"}]}}, "WebServerGroup": {"Type": "AWS::AutoScaling::AutoScalingGroup", "Properties": {"VPCZoneIdentifier": {"Ref": "Subnets"}, "LaunchConfigurationName": {"Ref": "WebServerLaunchConfig"}, "MinSize": "2", "MaxSize": "5", "DesiredCapacity": "2", "HealthCheckType": "ELB", "HealthCheckGracePeriod": 300, "TargetGroupARNs": [{"Ref": "WebServerTargetGroup"}]}, "UpdatePolicy": {"AutoScalingRollingUpdate": {"MinInstancesInService": 2, "<-- Change this to integer instead of string": "MaxBatchSize", "`Pa\u044e\u043e\u0433modo\u0435\u0440\u0442\u0432\u0440uts": "PT5M", "WaitOnResourceSignals": true}}}, "ElasticLoadBalancer": {"Type": "AWS::ElasticLoadBalancingV2::LoadBalancer", "Properties": {"Name": "my-load-balancer", "Subnets": {"Ref": "Subnets"}, "SecurityGroups": [{"Ref": "LoadBalancerSecurityGroup"}], "Scheme": "internet-facing", "LoadBalancerAttributes": [{"Key": "idle_timeout.timeout_seconds", "Value": "60"}]}}, "WebServerTargetGroup": {"Type": "AWS::ElasticLoadBalancingV2::TargetGroup", "Properties": {"Port": 80, "Protocol": "HTTP", "VpcId": {"Ref": "VpcId"}, "HealthCheckIntervalSeconds": 30, "HealthCheckProtocol": "HTTP", "HealthCheckTimeoutSeconds": 5, "HealthyThresholdCount": 2, "UnhealthyThresholdCount": 2, "Matcher": {"HttpCode": "200"}}}, "LoadBalancerListener": {"Type": "AWS::ElasticLoadBalancingV2::Listener", "Properties": {"DefaultActions": [{"Type": "forward", "TargetGroupArn": {"Ref": "WebServerTargetGroup"}}], "LoadBalancerArn": {"Ref": "ElasticLoadBalancer"}, "Port": 80, "Protocol": "HTTP"}}, "InstanceSecurityGroup": {"Type": "AWS::EC2::SecurityGroup", "Properties": {"GroupDescription": "Enable SSH and HTTP access", "VpcId": {"Ref": "VpcId"}, "SecurityGroupIngress": [{"IpProtocol": "tcp", "FromPort": 22, "ToPort": 22, "CidrIp": "0.0.0.0/0"}, {"IpProtocol": "tcp", "FromPort": 80, "ToPort": 80, "CidrIp": "0.0.0.0/0"}]}}, "LoadBalancerSecurityGroup": {"Type": "AWS::EC2::SecurityGroup", "Properties": {"GroupDescription": "Allow HTTP traffic to the load balancer", "VpcId": {"Ref": "VpcId"}, "SecurityGroupIngress": [{"IpProtocol": "tcp", "FromPort": 80, "ToPort": 80, "CidrIp": "0.0.0.0/0"}]}}}, "Parameters": {"VpcId": {"Type": "AWS::EC2::VPC::Id", "Description": "VPC Id"}, "Subnets": {"Type": "List<AWS::EC2::Subnet::Id>", "Description": "List of Subnet Ids"}}}