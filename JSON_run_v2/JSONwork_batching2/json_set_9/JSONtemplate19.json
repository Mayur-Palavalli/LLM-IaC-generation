{"AWSTemplateFormatVersion": "2010-09-09", "Description": "AWS CloudFormation Sample Template ELBGuidedAutoScalingRollingUpdates: This template creates an auto scaling group behind a load balancer with a simple health check. The Auto Scaling launch configuration includes an update policy that will keep 2 instances running while doing an autoscaling rolling update. The update will roll forward only when the ELB health check detects an updated instance in-service.", "Resources": {"myLoadBalancer": {"Type": "AWS::ElasticLoadBalancing::LoadBalancer", "Properties": {"AvailabilityZones": {"Fn::GetAZs": {"Ref": "AWS::Region"}}, "Listeners": [{"LoadBalancerPort": "80", "InstancePort": "80", "Protocol": "HTTP"}], "HealthCheck": {"Target": "HTTP:80/", "HealthyThreshold": "3", "UnhealthyThreshold": "5", "Interval": "30", "Timeout": "5"}}}, "myLaunchConfiguration": {"Type": "AWS::AutoScaling::LaunchConfiguration", "Properties": {"ImageId": "ami-0ff8a91507f77f867", "InstanceType": "t2.micro", "SecurityGroups": [{"Ref": "InstanceSecurityGroup"}]}}, "myAutoScalingGroup": {"Type": "AWS::AutoScaling::AutoScalingGroup", "Properties": {"AvailabilityZones": {"Fn::GetAZs": {"Ref": "AWS::Region"}}, "LaunchConfigurationName": {"Ref": "myLaunchConfiguration"}, "MinSize": "2", "MaxSize": "5", "DesiredCapacity": "2", "HealthCheckType": "ELB", "HealthCheckGracePeriod": 300, "TargetGroupARNs": [{"Ref": "myTargetGroup"}]}, "UpdatePolicy": {"AutoScalingRollingUpdate": {"MinInstancesInService": "2", "MaxBatchSize": "1", "PauseTime": "PT10M", "WaitOnResourceSignals": true}}}, "myTargetGroup": {"Type": "AWS::ElasticLoadBalancingV2::TargetGroup", "Properties": {"Port": 80, "Protocol": "HTTP", "VpcId": {"Ref": "VPC"}, "HealthCheckIntervalSeconds": 30, "HealthCheckProtocol": "HTTP", "HealthCheckTimeoutSeconds": 5, "HealthyThresholdCount": 5, "UnhealthyThresholdCount": 2}}, "InstanceSecurityGroup": {"Type": "AWS::EC2::SecurityGroup", "Properties": {"GroupDescription": "Enable HTTP access via port 80", "VpcId": {"Ref": "VPC"}, "SecurityGroupIngress": [{"IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "0.0.0.0/0"}]}}, "VPC": {"Type": "AWS::EC2::VPC", "Properties": {"CidrBlock": "10.0.0.0/16", "EnableDnsSupport": "true", "EnableDnsHostnames": "true", "Tags": [{"Key": "Name", "Value": "Primary-VPC"}]}}}, "Outputs": {"LoadBalancerDNSName": {"Description": "DNS Name of the load balancer", "Value": {"Fn::GetAtt": ["myLoadBalancer", "DNSName"]}}}}