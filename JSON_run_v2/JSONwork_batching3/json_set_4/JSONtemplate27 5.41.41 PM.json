{"AWSTemplateFormatVersion": "2010-09-09", "Transform": ["AWS::CloudFormation::Macro"], "Resources": {"DateFunctionsMacro": {"Type": "AWS::CloudFormation::Macro", "Properties": {"Name": "DateFunctions", "FunctionName": {"Fn::GetAtt": ["DateMacroLambdaFunction", "Arn"]}, "LogGroupName": {"Fn::Sub": ["/aws/lambda/${AWS::StackName}-DateMacroLambdaFunction", {}]}, "Description": "A macro that provides date functions for templates", "LogRoleARN": {"Fn::GetAtt": ["LambdaExecutionRole", "Arn"]}}}, "DateMacroLambdaFunction": {"Type": "AWS::Lambda::Function", "Properties": {"Handler": "index.lambda_handler", "Role": {"Fn::GetAtt": ["LambdaExecutionRole", "Arn"]}, "Code": {"ZipFile": {"Fn::Join": ["\n", ["import json", "import datetime", "def lambda_handler(event, context):", "    request_type = event['RequestType']", "    fragment = event['Fragment']", "    response_data = {}", "    if request_type in ['Create', 'Update']:", "        current_date = datetime.datetime.now()", "        date_format = fragment.get('DateFormat', '%Y-%m-%d')", "        response_data['CurrentDate'] = current_date.strftime(date_format)", "        if 'AddDays' in fragment:", "            delta_days = datetime.timedelta(days=int(fragment['AddDays']))", "            resulting_date = current_date + delta_days", "            response_data['ResultingDate'] = resulting_date.strftime(date_format)", "    response_body = json.dumps({", "        'Status': 'SUCCESS',", "        'RequestId': event['RequestId'],", "        'LogicalResourceId': event['LogicalResourceId'],", "        'PhysicalResourceId': context.log_stream_name,", "        'Data': response_data", "    })", "    return response_body"]]}}, "Runtime": "python3.8", "Timeout": "300"}}, "LambdaExecutionRole": {"Type": "AWS::IAM::Role", "Properties": {"AssumeRolePolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Principal": {"Service": ["lambda.amazonaws.com"]}, "Action": ["sts:AssumeRole"]}]}, "Policies": [{"PolicyName": "root", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"], "Resource": "*"}]}}]}}}, "Outputs": {"DateMacroFunctionName": {"Description": "Name of the Lambda function for date manipulation", "Value": {"Ref": "DateMacroLambdaFunction"}}, "MacroArn": {"Description": "ARN of the date functions macro", "Value": {"Fn::GetAtt": ["DateFunctionsMacro", "Id"]}}}}