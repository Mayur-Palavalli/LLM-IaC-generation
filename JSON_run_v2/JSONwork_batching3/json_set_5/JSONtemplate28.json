{"AWSTemplateFormatVersion": "2010-09-09", "Resources": {"DateMacro": {"Type": "AWS::CloudFormation::Macro", "Properties": {"Name": "DateMacro", "FunctionName": {"Fn::GetAtt": ["DateMacroFunction", "Arn"]}}}, "DateMacroFunction": {"Type": "AWS::Lambda::Function", "Properties": {"Handler": "index.handler", "Role": {"Fn::GetAtt": ["LambdaExecutionRole", "Arn"]}, "Code": {"ZipFile": "import json\nimport datetime\ndef handler(event, context):\n    params = json.loads(event['resourceProperties']['Parameters'])\n    operation = params.get('Operation')\n    result = None\n    if operation == 'current_date':\n        result = str(datetime.datetime.now().date())\n    elif operation == 'add_days':\n        days = int(params.get('Days', 0))\n        result = str((datetime.datetime.now() + datetime.timedelta(days=days)).date())\n    elif operation == 'subtract_days':\n        days = int(params.get('Days', 0))\n        result = str((datetime.datetime.now() - datetime.timedelta(days=days)).date())\n    return { 'statusCode': 200, 'body': json.dumps(result) }\ndef lambda_handler(event, context):\n    if event['resourceType'] == 'Custom::DateMacro':\n        return handler(event, context)\n    else:\n        return { 'status': 'FAILED', 'reason': 'Invalid resource type.' }\n"}, "Runtime": "python3.8", "Timeout": 300}}, "LambdaExecutionRole": {"Type": "AWS::IAM::Role", "Properties": {"AssumeRolePolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Principal": {"Service": "lambda.amazonaws.com"}, "Action": "sts:AssumeRole"}]}, "Policies": [{"PolicyName": "LambdaExecutionPolicy", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"], "Resource": "*"}]}}]}}}}