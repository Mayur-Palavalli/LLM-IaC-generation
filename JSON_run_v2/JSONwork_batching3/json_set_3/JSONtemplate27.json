{"AWSTemplateFormatVersion": "2010-09-09", "Resources": {"DateMacro": {"Type": "AWS::CloudFormation::Macro", "Properties": {"Name": "DateMacro", "FunctionName": {"Fn::GetAtt": ["DateMacroFunction", "Arn"]}}}, "DateMacroFunction": {"Type": "AWS::Lambda::Function", "Properties": {"Handler": "index.handler", "Role": {"Fn::GetAtt": ["LambdaExecutionRole", "Arn"]}, "Runtime": "python3.9", "Code": {"ZipFile": {"Fn::Join": ["", ["import json\n", "from datetime import datetime, timedelta\n", "\n", "def handler(event, context):\n", "    print('Event:', event)\n", "    if 'params' not in event or 'path' not in event['params']:\n", "        return {'statusCode': 400, 'body': 'Invalid request'}\n", "    path = event['params']['path']\n", "    if path == 'current_date':\n", "        return {'statusCode': 200, 'date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n", "    elif path == 'date_math':\n", "        if 'days' in event['params']['querystring']:\n", "            days = int(event['params']['querystring']['days'])\n", "            new_date = datetime.now() + timedelta(days=days)\n", "            return {'statusCode': 200, 'date': new_date.strftime('%Y-%m-%d %H:%M:%S')}\n", "        else:\n", "            return {'statusCode': 400, 'body': 'Invalid date math request'}\n", "    else:\n", "        return {'statusCode': 400, 'body': 'Unknown path'}\n"]]}}}}, "LambdaExecutionRole": {"Type": "AWS::IAM::Role", "Properties": {"AssumeRolePolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Principal": {"Service": "lambda.amazonaws.com"}, "Action": "sts:AssumeRole"}]}, "Policies": [{"PolicyName": "LambdaBasicExecution", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"], "Resource": "*"}]}}]}}}}