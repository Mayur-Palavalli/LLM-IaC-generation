{"AWSTemplateFormatVersion": "2010-09-09", "Resources": {"DateMacro": {"Type": "AWS::CloudFormation::Macro", "Properties": {"Name": "DateFunctions", "Description": "A collection of date functions for use in CloudFormation templates.", "FunctionName": {"Fn::GetAtt": ["DateLambdaFunction", "Arn"]}, "LogGroupName": "/aws/lambda/DateFunctions", "LogRoleARN": {"Fn::GetAtt": ["LambdaExecutionRole", "Arn"]}}}, "DateLambdaFunction": {"Type": "AWS::Lambda::Function", "Properties": {"Handler": "index.handler", "Role": {"Fn::GetAtt": ["LambdaExecutionRole", "Arn"]}, "Code": {"ZipFile": {"Fn::Join": ["\n", ["import datetime", "import json", "def handler(event, context):", "    try:", "        operation = event['operation']", "        if operation == 'current_date':", "            resp_date = datetime.datetime.now()", "        elif operation == 'add_days':", "            initial_date = datetime.datetime.strptime(event['date'], '%Y-%m-%d')", "            days_to_add = datetime.timedelta(days=int(event['days']))", "            resp_date = initial_date + days_to_add", "        return {", "            'statusCode': 200,", "            'body': json.dumps({'date': resp_date.strftime('%Y-%m-%d')})", "        }", "    except Exception as e:", "        return {", "            'statusCode': 400,", "            'body': json.dumps({'error': str(e)})", "        }"]]}}, "Runtime": "python3.8"}}, "LambdaExecutionRole": {"Type": "AWS::IAM::Role", "Properties": {"AssumeRolePolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Principal": {"Service": "lambda.amazonaws.com"}, "Action": "sts:AssumeRole"}]}, "Policies": [{"PolicyName": "root", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"], "Resource": "arn:aws:logs:*:*:*"}]}}]}}}}