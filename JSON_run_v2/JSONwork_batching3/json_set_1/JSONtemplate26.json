{"Resources": {"DateMacroFunction": {"Type": "AWS::Lambda::Function", "Properties": {"Handler": "index.handler", "Role": {"Fn::GetAtt": ["LambdaExecutionRole", "Arn"]}, "Code": {"ZipFile": {"Fn::Join": ["\n", ["import json", "from datetime import datetime, timedelta", "", "def handler(event, context):", "    request_type = event['requestType']", "    properties = event['resourceProperties']", "", "    if request_type == 'GetCurrentDate':", "        current_date = datetime.utcnow().strftime('%Y-%m-%d')", "        return { 'currentDate': current_date }", "", "    elif request_type == 'AddDays':", "        base_date = datetime.strptime(properties['baseDate'], '%Y-%m-%d')", "        days_to_add = int(properties['daysToAdd'])", "        new_date = (base_date + timedelta(days=days_to_add)).strftime('%Y-%m-%d')", "        return { 'newDate': new_date }", "", "    elif request_type == 'SubtractDays':", "        base_date = datetime.strptime(properties['baseDate'], '%Y-%m-%d')", "        days_to_subtract = int(properties['daysToSubtract'])", "        new_date = (base_date - timedelta(days=days_to_subtract)).strftime('%Y-%m-%d')", "        return { 'newDate': new_date }", "", "    else:", "        raise Exception('Invalid request type')"]]}}, "Runtime": "python3.8"}}, "LambdaExecutionRole": {"Type": "AWS::IAM::Role", "Properties": {"AssumeRolePolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Principal": {"Service": "lambda.amazonaws.com"}, "Action": "sts:AssumeRole"}]}, "Policies": [{"PolicyName": "root", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": "logs:*", "Resource": "arn:aws:logs:*:*:*"}]}}]}}, "DateMacro": {"Type": "AWS::CloudFormation::Macro", "Properties": {"FunctionName": {"Ref": "DateMacroFunction"}, "Name": "DateMacro"}}}}