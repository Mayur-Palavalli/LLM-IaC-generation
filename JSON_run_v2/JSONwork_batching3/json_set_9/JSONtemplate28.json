{"AWSTemplateFormatVersion": "2010-09-09", "Resources": {"DateMacro": {"Type": "AWS::CloudFormation::Macro", "Properties": {"Name": "DateMacro", "FunctionName": {"Fn::GetAtt": ["DateMacroFunction", "Arn"]}}}, "DateMacroFunction": {"Type": "AWS::Lambda::Function", "Properties": {"Handler": "index.lambda_handler", "Role": {"Fn::GetAtt": ["LambdaExecutionRole", "Arn"]}, "Code": {"ZipFile": {"Fn::Join": ["\n", ["import json", "import datetime", "def handler(event, context):", "    params = json.loads(event['ResourceProperties']['Parameters'])", "    operation = params.get('Operation')", "    result = None", "    if operation == 'current_date':", "        result = str(datetime.datetime.now().date())", "    elif operation == 'add_days':", "        days = int(params.get('Days', 0))", "        result = str((datetime.datetime.now() + datetime.timedelta(days=days)).date())", "    elif operation == 'subtract_days':", "        days = int(params.get('Days', 0))", "        result = str((datetime.datetime.now() - datetime.timedelta(days=days)).date())", "    return { 'statusCode': 200, 'body': json.dumps(result) }", "def lambda_handler(event, context):", "    if event['ResourceType'] == 'Custom::DateMacro':", "        return handler(event, context)", "    else:", "        return { 'status': 'FAILED', 'reason': 'Invalid resource type.' }"]]}}, "Runtime": "python3.8", "Timeout": 300}, "DependsOn": ["LambdaExecutionRole"]}, "LambdaExecutionRole": {"Type": "AWS::IAM::Role", "Properties": {"AssumeRolePolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Principal": {"Service": "lambda.amazonaws.com"}, "Action": "sts:AssumeRole"}]}, "Policies": [{"PolicyName": "LambdaExecutionPolicy", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"], "Resource": "*"}]}}]}}}}