{"AWSTemplateFormatVersion": "2010-09-09", "Transform": "AWS::CloudFormation::Macro", "Resources": {"DateMacro": {"Type": "AWS::Lambda::Function", "Properties": {"Handler": "index.handler", "Role": {"Fn::GetAtt": ["LambdaExecutionRole", "Arn"]}, "Code": {"ZipFile": {"Fn::Join": ["\n", ["import datetime", "import json", "def handler(event, context):", "    try:", "        if event['requestContext']['httpMethod'] == 'GET':", "            if 'current-date' in event['queryStringParameters'].keys():", "                return {", "                    'statusCode': 200,", "                    'body': json.dumps({'current-date': str(datetime.datetime.now())})", "                }", "            elif 'add-days' in event['queryStringParameters'].keys():", "                days = int(event['queryStringParameters']['add-days'])", "                new_date = datetime.datetime.now() + datetime.timedelta(days=days)", "                return {", "                    'statusCode': 200,", "                    'body': json.dumps({'date': str(new_date)})", "                }", "            else:", "                raise ValueError('No valid parameters')", "        else:", "            raise ValueError('Method not supported')", "    except Exception as e:", "        return {", "            'statusCode': 400,", "            'body': json.dumps({'error': str(e)})", "        }"]]}}, "Runtime": "python3.9"}}, "LambdaExecutionRole": {"Type": "AWS::IAM::Role", "Properties": {"AssumeRolePolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Principal": {"Service": ["lambda.amazonaws.com"]}, "Action": "sts:AssumeRole"}]}, "Policies": [{"PolicyName": "root", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"], "Resource": "arn:aws:logs:*:*:*"}]}}]}}}}