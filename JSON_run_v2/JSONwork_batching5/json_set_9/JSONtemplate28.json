{"AWSTemplateFormatVersion": "2010-09-09", "Resources": {"DateMacroFunction": {"Type": "AWS::Lambda::Function", "Properties": {"Handler": "index.lambda_handler", "Role": {"Fn::GetAtt": ["LambdaExecutionRole", "Arn"]}, "Code": {"ZipFile": {"Fn::Join": ["", ["import json\n", "from datetime import datetime, timedelta\n", "def lambda_handler(event, context):\n", "    action = event.get('action')\n", "    if action == 'current_date':\n", "        return {'date': datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ')}\n", "    elif action == 'date_add':\n", "        days = int(event.get('days', 0))\n", "        new_date = datetime.utcnow() + timedelta(days=days)\n", "        return {'date': new_date.strftime('%Y-%m-%dT%H:%M:%SZ')}\n", "    elif action == 'date_subtract':\n", "        days = int(event.get('days', 0))\n", "        new_date = datetime.utcnow() - timedelta(days=days)\n", "        return {'date': new_date.strftime('%Y-%m-%dT%H:%M:%SZ')}\n", "    else:\n", "        return {'error': 'Invalid action'}\n"]]}}, "Runtime": "python3.8", "Timeout": 30, "MemorySize": 128}, "DependsOn": ["LambdaExecutionRole"]}, "LambdaExecutionRole": {"Type": "AWS::IAM::Role", "Properties": {"AssumeRolePolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Principal": {"Service": "lambda.amazonaws.com"}, "Action": "sts:AssumeRole"}]}, "Policies": [{"PolicyName": "LambdaBasicExecution", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"], "Resource": "*"}]}}]}}, "DateMacro": {"Type": "AWS::CloudFormation::Macro", "Properties": {"Name": "DateMacro", "FunctionName": {"Fn::GetAtt": ["DateMacroFunction", "Arn"]}, "Description": "A macro for date manipulation in CloudFormation templates"}, "DependsOn": ["DateMacroFunction"]}}}