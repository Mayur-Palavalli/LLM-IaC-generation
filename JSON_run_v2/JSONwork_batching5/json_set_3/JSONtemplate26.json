{"AWSTemplateFormatVersion": "2010-09-09", "Description": "AWS CloudFormation Template to set up a macro for date manipulation written in Python.", "Resources": {"DateMacroFunction": {"Type": "AWS::Lambda::Function", "Properties": {"Handler": "index.lambda_handler", "Role": {"Fn::GetAtt": ["LambdaExecutionRole", "Arn"]}, "Code": {"ZipFile": {"Fn::Join": ["\n", ["import json", "from datetime import datetime, timedelta", "", "def lambda_handler(event, context):", "    request_type = event['requestType']", "    if request_type == 'GetCurrentDate':", "        return {'statusCode': 200, 'body': json.dumps({'date': datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')})}", "    elif request_type == 'AddDays':", "        days_to_add = int(event['days'])", "        current_date = datetime.utcnow()", "        new_date = current_date + timedelta(days=days_to_add)", "        return {'statusCode': 200, 'body': json.dumps({'date': new_date.strftime('%Y-%m-%d %H:%M:%S')})}", "    else:", "        return {'statusCode': 400, 'body': 'Invalid request type'}"]]}}, "Runtime": "python3.8", "Timeout": 30}}, "DateMacro": {"Type": "AWS::CloudFormation::Macro", "Properties": {"Name": "DateMacro", "FunctionName": {"Ref": "DateMacroFunction"}, "Description": "A macro for date manipulation in CloudFormation."}}, "LambdaExecutionRole": {"Type": "AWS::IAM::Role", "Properties": {"AssumeRolePolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Principal": {"Service": "lambda.amazonaws.com"}, "Action": "sts:AssumeRole"}]}, "Policies": [{"PolicyName": "LambdaBasicExecution", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"], "Resource": "*"}]}}]}}}}