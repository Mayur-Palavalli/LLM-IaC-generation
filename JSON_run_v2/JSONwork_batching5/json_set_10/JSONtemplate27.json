{"AWSTemplateFormatVersion": "2010-09-09", "Resources": {"DateMacroFunction": {"Type": "AWS::Lambda::Function", "Properties": {"Handler": "index.lambda_handler", "Role": {"Fn::GetAtt": ["LambdaExecutionRole", "Arn"]}, "Code": {"ZipFile": {"Fn::Join": ["\n", ["import json", "import datetime", "from datetime import timedelta", "", "def lambda_handler(event, context):", "    request_type = event.get('RequestType')", "    properties = event.get('ResourceProperties', {})", "    if request_type == 'CurrentDate':", "        return {'statusCode': 200, 'Date': datetime.datetime.utcnow().strftime('%Y-%m-%d')}", "    if request_type == 'DateMath' and 'Days' in properties:", "        days = int(properties['Days'])", "        return {'statusCode': 200, 'Date': (datetime.datetime.utcnow() + timedelta(days=days)).strftime('%Y-%m-%d')}", "    return {'statusCode': 400, 'Message': 'Invalid Request'}"]]}}, "Runtime": "python3.9", "Timeout": 60}}, "LambdaExecutionRole": {"Type": "AWS::IAM::Role", "Properties": {"AssumeRolePolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Principal": {"Service": "lambda.amazonaws.com"}, "Action": "sts:AssumeRole"}]}, "Policies": [{"PolicyName": "LambdaExecutionPolicy", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"], "Resource": "*"}]}}]}}, "DateMacro": {"Type": "AWS::CloudFormation::Macro", "Properties": {"Name": "DateMacro", "FunctionName": {"Ref": "DateMacroFunction"}}}}}