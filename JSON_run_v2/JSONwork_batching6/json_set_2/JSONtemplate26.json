{"AWSTemplateFormatVersion": "2010-09-09", "Description": "CloudFormation template for a date macro that provides functions for date manipulation including getting the current date and performing date math.", "Resources": {"DateMacroLambda": {"Type": "AWS::Lambda::Function", "Properties": {"Handler": "index.lambda_handler", "Runtime": "python3.8", "Role": {"Fn::GetAtt": ["LambdaExecutionRole", "Arn"]}, "Code": {"ZipFile": {"Fn::Join": ["\n", ["import json", "from datetime import datetime, timedelta", "def lambda_handler(event, context):", "    request_type = event.get('fragment', {}).get('requestType')", "    parameters = event.get('fragment', {}).get('params', {})", "    if request_type == 'GetCurrentDate':", "        format_string = parameters.get('format', '%Y-%m-%d')", "        current_date = datetime.utcnow().strftime(format_string)", "        return {'requestId': event['requestId'], 'status': 'success', 'fragment': current_date}", "    elif request_type == 'AddDays':", "        days = int(parameters.get('days', 0))", "        base_date_str = parameters.get('baseDate', '')", "        format_string = parameters.get('format', '%Y-%m-%d')", "        base_date = datetime.strptime(base_date_str, format_string)", "        new_date = base_date + timedelta(days=days)", "        return {'requestId': event['requestId'], 'status': 'success', 'fragment': new_date.strftime(format_string)}", "    elif request_type == 'SubtractDays':", "        days = int(parameters.get('days', 0))", "        base_date_str = parameters.get('baseDate', '')", "        format_string = parameters.get('format', '%Y-%m-%d')", "        base_date = datetime.strptime(base_date_str, format_string)", "        new_date = base_date - timedelta(days=days)", "        return {'requestId': event['requestId'], 'status': 'success', 'fragment': new_date.strftime(format_string)}", "    return {'requestId': event['requestId'], 'status': 'failed', 'fragment': 'Unknown request type'}"]]}}}}, "LambdaExecutionRole": {"Type": "AWS::IAM::Role", "Properties": {"AssumeRolePolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Principal": {"Service": "lambda.amazonaws.com"}, "Action": "sts:AssumeRole"}]}, "Policies": [{"PolicyName": "LambdaBasicExecution", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"], "Resource": "*"}]}}]}}, "DateMacro": {"Type": "AWS::CloudFormation::Macro", "Properties": {"Name": "DateMacro", "FunctionArn": {"Fn::GetAtt": ["DateMacroLambda", "Arn"]}}}}}