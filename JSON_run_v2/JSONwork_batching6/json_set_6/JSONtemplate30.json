{"AWSTemplateFormatVersion": "2010-09-09", "Description": "Custom Macro for Date Manipulation in CloudFormation", "Resources": {"DateMacro": {"Type": "AWS::CloudFormation::Macro", "Properties": {"Name": "DateMacro", "FunctionName": {"Ref": "DateMacroFunction"}, "LogGroupName": "/aws/lambda/DateMacroFunction"}}, "DateMacroFunction": {"Type": "AWS::Lambda::Function", "Properties": {"Handler": "index.handler", "Role": {"Fn::GetAtt": ["LambdaExecutionRole", "Arn"]}, "Runtime": "python3.9", "Description": "Lambda function for date manipulation in CloudFormation templates", "Code": {"ZipFile": {"Fn::Join": ["\n", ["import json", "from datetime import datetime, timedelta", "", "def handler(event, context):", "    operation = event['requestType']", "    now = datetime.now()", "    if operation == 'current_date':", "        response = now.strftime('%Y-%m-%d')", "    elif operation == 'add_days':", "        days = int(event['parameters']['days'])", "        future_date = now + timedelta(days=days)", "        response = future_date.strftime('%Y-%m-%d')", "    elif operation == 'subtract_days':", "        days = int(event['parameters']['days'])", "        past_date = now - timedelta(days=days)", "        response = past_date.strftime('%Y-%m-%d')", "    else:", "        response = 'Invalid operation'", "", "    return {", "        'requestId': event['requestId'],", "        'status': 'success',", "        'fragment': response", "    }"]]}}, "Timeout": 30, "MemorySize": 128}}, "LambdaExecutionRole": {"Type": "AWS::IAM::Role", "Properties": {"AssumeRolePolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Principal": {"Service": "lambda.amazonaws.com"}, "Action": "sts:AssumeRole"}]}, "Policies": [{"PolicyName": "LambdaBasicExecution", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"], "Resource": "*"}]}}]}}}}