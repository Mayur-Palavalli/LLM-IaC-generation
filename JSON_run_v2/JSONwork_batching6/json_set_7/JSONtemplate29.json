{"AWSTemplateFormatVersion": "2010-09-09", "Resources": {"DateMacro": {"Type": "AWS::CloudFormation::Macro", "Properties": {"Name": "DateMacro", "FunctionName": {"Ref": "DateLambdaFunction"}}}, "DateLambdaFunction": {"Type": "AWS::Lambda::Function", "Properties": {"Handler": "index.handler", "Role": {"Fn::GetAtt": ["LambdaExecutionRole", "Arn"]}, "Code": {"ZipFile": "import json\nimport datetime\ndef handler(event, context):\n    resource_properties = event['resourceProperties']\n    operation = resource_properties['Operation']\n    if operation == 'GetCurrentDate':\n        return {'CurrentDate': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n    elif operation == 'AddDays':\n        input_date_str = resource_properties['Date']\n        days_to_add = int(resource_properties['Days'])\n        input_date = datetime.datetime.strptime(input_date_str, '%Y-%m-%d %H:%M:%S')\n        new_date = input_date + datetime.timedelta(days=days_to_add)\n        return {'NewDate': new_date.strftime('%Y-%m-%d %H:%M:%S')}\n    else:\n        return {'Error': 'Invalid operation provided.'}"}, "Runtime": "python3.8", "Timeout": 30}, "DependsOn": "LambdaExecutionRole"}, "LambdaExecutionRole": {"Type": "AWS::IAM::Role", "Properties": {"AssumeRolePolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Principal": {"Service": "lambda.amazonaws.com"}, "Action": "sts:AssumeRole"}]}, "Policies": [{"PolicyName": "DateLambdaPolicy", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"], "Resource": "*"}, {"Effect": "Allow", "Action": ["lambda:InvokeFunction", "lambda:InvokeAsync"], "Resource": "*"}]}}]}}}, "Outputs": {"DateMacroArn": {"Description": "Date Macro Function ARN", "Value": {"Fn::GetAtt": ["DateLambdaFunction", "Arn"]}}}}