{"Resources": {"DateMacro": {"Type": "AWS::CloudFormation::Macro", "Properties": {"Name": "DateMacro", "FunctionName": {"Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:DateMacroFunction"}, "LogGroupName": "/aws/lambda/DateMacroFunction"}}, "DateMacroFunction": {"Type": "AWS::Lambda::Function", "Properties": {"Handler": "index.handler", "Role": {"Fn::GetAtt": ["LambdaExecutionRole", "Arn"]}, "Code": {"ZipFile": "def handler(event, context):\n    import json\n    from datetime import datetime, timedelta\n    request = json.loads(event['fragment'])\n    operation = request['operation']\n\n    if operation == 'get_current_date':\n        response = str(datetime.utcnow().date())\n    elif operation == 'add_days':\n        start_date = datetime.strptime(request['start_date'], '%Y-%m-%d')\n        days = int(request['days'])\n        response = str((start_date + timedelta(days=days)).date())\n    else:\n        response = 'Invalid operation'\n\n    return {\n        'requestId': event['requestId'],\n        'status': 'success',\n        'fragment': response\n    }"}, "Runtime": "python3.8", "Timeout": 30}}, "LambdaExecutionRole": {"Type": "AWS::IAM::Role", "Properties": {"AssumeRolePolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Principal": {"Service": "lambda.amazonaws.com"}, "Action": "sts:AssumeRole"}]}, "Policies": [{"PolicyName": "root", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": "logs:*", "Resource": "arn:aws:logs:*:*:*"}]}}]}}}}