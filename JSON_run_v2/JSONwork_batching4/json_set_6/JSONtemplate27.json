{"AWSTemplateFormatVersion": "2010-09-09", "Resources": {"DateMacro": {"Type": "AWS::CloudFormation::Macro", "Properties": {"Name": "DateMacro", "FunctionName": {"Fn::GetAtt": ["DateFunction", "Arn"]}}}, "DateFunction": {"Type": "AWS::Lambda::Function", "Properties": {"Handler": "index.handler", "Role": {"Fn::GetAtt": ["LambdaExecutionRole", "Arn"]}, "Runtime": "python3.8", "Code": {"ZipFile": {"Fn::Join": ["", ["import json\n", "import datetime\n", "def handler(event, context):\n", "    params = event['headers']\n", "    operation = params.get('operation')\n", "    if operation == 'add_days':\n", "        date_str = params.get('date')\n", "        days = int(params.get('days'))\n", "        date = datetime.datetime.strptime(date_str, '%Y-%m-%d')\n", "        new_date = date + datetime.timedelta(days=days)\n", "        response = new_date.strftime('%Y-%m-%d')\n", "    elif operation == 'current_date':\n", "        response = datetime.datetime.utcnow().strftime('%Y-%m-%d')\n", "    else:\n", "        response = 'Invalid operation'\n", "    return {\n", "        'statusCode': 200,\n", "        'body': json.dumps({'response': response})\n", "    }\n"]]}}}}, "LambdaExecutionRole": {"Type": "AWS::IAM::Role", "Properties": {"AssumeRolePolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Principal": {"Service": "lambda.amazonaws.com"}, "Action": "sts:AssumeRole"}]}, "Policies": [{"PolicyName": "LambdaBasicExecution", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"], "Resource": "*"}]}}]}}}}