{"Resources": {"MacroFunction": {"Type": "AWS::Lambda::Function", "Properties": {"Handler": "index.lambda_handler", "Role": {"Fn::GetAtt": ["LambdaExecutionRole", "Arn"]}, "Code": {"ZipFile": "import dateutil.parser\nimport datetime\nimport json\n\ndef lambda_handler(event, context):\n    request_type = event['requestType']\n    if request_type == 'CurrentDate':\n        return {'statusCode': 200, 'body': json.dumps({'date': datetime.datetime.now().isoformat()})}\n    elif request_type == 'DateMath':\n        base_date = dateutil.parser.parse(event['baseDate'])\n        delta = datetime.timedelta(days=int(event['days']))\n        calculated_date = base_date + delta\n        return {'statusCode': 200, 'body': json.dumps({'calculatedDate': calculated_date.isoformat()})}\n    else:\n        return {'statusCode': 400, 'body': json.dumps({'error': 'Invalid request type'})}\n"}, "Runtime": "python3.8", "Timeout": 60, "MemorySize": 128}}, "LambdaExecutionRole": {"Type": "AWS::IAM::Role", "Properties": {"AssumeRolePolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Principal": {"Service": "lambda.amazonaws.com"}, "Action": "sts:AssumeRole"}]}, "Policies": [{"PolicyName": "LambdaExecutionPolicy", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"], "Resource": "*"}]}}]}}, "DateMacro": {"Type": "AWS::CloudFormation::Macro", "Properties": {"Name": "DateMacro", "FunctionName": {"Ref": "MacroFunction"}}}}}