{"AWSTemplateFormatVersion": "2010-09-09", "Resources": {"LambdaExecutionRole": {"Type": "AWS::IAM::Role", "Properties": {"AssumeRolePolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Principal": {"Service": ["lambda.amazonaws.com"]}, "Action": ["sts:AssumeRole"]}]}, "Policies": [{"PolicyName": "LambdaBasicExecution", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"], "Resource": "*"}]}}]}}, "DateMacroFunction": {"Type": "AWS::Lambda::Function", "Properties": {"FunctionName": "DateMacroFunction", "Code": {"ZipFile": {"Fn::Join": ["", ["import json\n", "import boto3\n", "from datetime import datetime, timedelta\n", "def lambda_handler(event, context):\n", "    request_type = event.get('RequestType')\n", "    props = event.get('ResourceProperties')\n", "    response = {}\n", "    if request_type == 'Create' or request_type == 'Update':\n", "        if props['Function'] == 'CurrentDate':\n", "            response['Result'] = datetime.utcnow().strftime('%Y-%m-%d')\n", "        elif props['Function'] == 'DateAdd':\n", "            date_str = props['Date']\n", "            days = int(props['Days'])\n", "            date_obj = datetime.strptime(date_str, '%Y-%m-%d')\n", "            new_date = date_obj + timedelta(days=days)\n", "            response['Result'] = new_date.strftime('%Y-%m-%d')\n", "    return {'Status': 'SUCCESS', 'Response': response}\n"]]}}, "Handler": "index.lambda_handler", "Runtime": "python3.8", "Role": {"Fn::GetAtt": ["LambdaExecutionRole", "Arn"]}}}}, "Outputs": {"DateMacroFunctionArn": {"Value": {"Fn::GetAtt": ["DateMacroFunction", "Arn"]}, "Description": "ARN of the Date Macro function"}}}