{"AWSTemplateFormatVersion": "2010-09-09", "Resources": {"DateMacro": {"Type": "AWS::CloudFormation::Macro", "Properties": {"Name": "DateMacro", "FunctionName": {"Fn::GetAtt": ["DateMacroFunction", "Arn"]}}}, "DateMacroRole": {"Type": "AWS::IAM::Role", "Properties": {"AssumeRolePolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Principal": {"Service": "lambda.amazonaws.com"}, "Action": "sts:AssumeRole"}]}, "Policies": [{"PolicyName": "DateMacroPolicy", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"], "Resource": "*"}]}}]}}, "DateMacroFunction": {"Type": "AWS::Lambda::Function", "Properties": {"Handler": "index.handler", "Role": {"Fn::GetAtt": ["DateMacroRole", "Arn"]}, "Runtime": "python3.8", "Code": {"ZipFile": {"Fn::Join": ["", ["import json\n", "from datetime import datetime, timedelta\n", "import cfnresponse\n\n", "def handler(event, context):\n", "    request_type = event['RequestType']\n", "    if request_type == 'Create' or request_type == 'Update':\n", "        response_data = {}\n", "        properties = event['ResourceProperties']\n", "        action = properties.get('Action', 'current_date')\n", "        if action == 'current_date':\n", "            response_data['Date'] = datetime.now().strftime('%Y-%m-%d')\n", "        elif action == 'date_math':\n", "            base_date = properties.get('BaseDate')\n", "            delta_days = int(properties.get('DaysDelta', 0))\n", "            new_date = (datetime.strptime(base_date, '%Y-%m-%d') + timedelta(days=delta_days)).strftime('%Y-%m-%d')\n", "            response_data['Date'] = new_date\n", "        cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)\n", "    elif request_type == 'Delete':\n", "        cfnresponse.send(event, context, cfnresponse.SUCCESS, {})\n"]]}}}}}}